{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["const ios = /iPad|iPhone/.test(navigator.userAgent);\nconst availableConcurrency = 'hardwareConcurrency' in navigator ? navigator.hardwareConcurrency : ios ? 2 : 8;\nconst workers = Array.from({ length: availableConcurrency }, _ => new Worker('./worker.js'));\nconst numberFormatter = new Intl.NumberFormat();\nconst numberFormat = number => numberFormatter.format(number);\nconst loadWords = async url => fetch(url).then(res => res.text());\n\nconst {\n    customWordFileElem,\n    customWordListElem,\n    elapsedTimeElem,\n    fiveLetterWordCountElem,\n    normalizedWordCountElem,\n    workersWorkingElem,\n    workItemsElem,\n    solutionCountElem,\n    solutionsElem,\n    wordCountElem,\n    solveFormElem,\n    solveButtonElem,\n    wordlListElem,\n    wordsAlphaListElem,\n} = window;\n\nfor (let n = 0; n < availableConcurrency; ++n) {\n    const option = document.createElement('option');\n    option.append(n + 1);\n    solveFormElem.concurrency.append(option);\n}\nsolveFormElem.concurrency.value = availableConcurrency;\n\ncustomWordFileElem.addEventListener('change', e => (solveFormElem.wordlist.value = 'custom'));\ncustomWordListElem.addEventListener('change', e => {\n    if (solveFormElem.wordlist.value === 'custom' && !customWordFileElem.value) {\n        customWordFileElem.click();\n    }\n});\n\nconst solve = wordsString => {\n    const startTime = Date.now();\n    solveButtonElem.innerText = 'Solving...';\n    solutionsElem.innerHTML = '';\n    solutionCountElem.innerText = '0';\n    const allWords = wordsString.split(/\\r?\\n/).map(word => word.trim().toLowerCase());\n    wordCountElem.innerText = numberFormat(allWords.length);\n\n    const fiveLetterWords = allWords.filter(word => /^[a-z]{5}$/.test(word));\n    fiveLetterWordCountElem.innerText = numberFormat(fiveLetterWords.length);\n    // normalizedWords are fiveLetterWords with their letters rearranged so that they are sorted (WORDS becomes DORSW).\n    // Anagrams are removed from consideration by searching for normalizedWords instead of actual words since all anagrams\n    // map to the same normalizedWord.  Normalized words with any repeating characters /(.)\\1/ are also removed.\n    const normalizedWordMap = new Map();\n    for (const word of fiveLetterWords) {\n        const normalizedWord = [...word].sort().join('');\n        if (!normalizedWord.match(/(.)\\1/)) {\n            const entry = normalizedWordMap.get(normalizedWord);\n            if (!entry) {\n                normalizedWordMap.set(normalizedWord, word);\n            } else {\n                normalizedWordMap.set(normalizedWord, [entry, word].join('/'));\n            }\n        }\n    }\n\n    normalizedWordCountElem.innerText = numberFormat(normalizedWordMap.size);\n    const words = [...normalizedWordMap.keys()];\n\n    const options = words.reduce((options, word) => {\n        options[word] = word.split('').map(letter => `letter${letter}`);\n        return options;\n    }, {});\n\n    const solutions = new Set();\n    const displaySolutions = [];\n    const a = 'a'.charCodeAt(0);\n    const z = 'z'.charCodeAt(0);\n    const work = [];\n\n    for (let charCode = a; charCode <= z; ++charCode) {\n        const excludedLetter = String.fromCharCode(charCode);\n        const includedOptions = Object.fromEntries(Object.entries(options).filter(([word]) => !word.includes(excludedLetter)));\n        work.push({ options: includedOptions, givenOptions: [] });\n    }\n\n    work.sort((a, b) => Math.random() - 0.5);\n    const recordSolution = solution => {\n        const normalizedSolution = solution.sort().join(',');\n        if (!solutions.has(normalizedSolution)) {\n            solutions.add(normalizedSolution);\n            solutionCountElem.innerText = numberFormat(solutions.size);\n            displaySolutions.push(\n                normalizedSolution\n                    .split(',')\n                    .map(step => normalizedWordMap.get(step))\n                    .sort()\n                    .join(', ')\n            );\n        }\n    };\n\n    const renderInterval = setInterval(\n        _ =>\n            requestAnimationFrame(_ => {\n                for (const solution of displaySolutions.slice(solutionsElem.children.length)) {\n                    const li = document.createElement('li');\n                    li.innerText = solution;\n                    solutionsElem.append(li);\n                }\n                const elapsedSeconds = numberFormat((Date.now() - startTime) / 1000);\n                elapsedTimeElem.innerText = `${elapsedSeconds} seconds`;\n                solutionsElem.scrollTop = solutionsElem.scrollHeight;\n            }),\n        60\n    );\n\n    let currentWorkItem = 0;\n    let completedWorkItems = 0;\n\n    const concurrency = solveFormElem.concurrency.value;\n\n    return new Promise((resolve, reject) => {\n        for (const [n, worker] of workers.entries()) {\n            if (n >= concurrency) {\n                break;\n            }\n            workersWorkingElem.value = n + 1;\n            const messageHandler = msg => {\n                switch (msg.data.type) {\n                    case 'solution': {\n                        recordSolution(msg.data.solution);\n                        break;\n                    }\n\n                    case 'completed': {\n                        if (++completedWorkItems < work.length) {\n                            if (currentWorkItem < work.length) {\n                                worker.postMessage({ type: 'solve', ...work[currentWorkItem++] });\n                            } else {\n                                workersWorkingElem.value -= 1;\n                                worker.removeEventListener('message', messageHandler);\n                            }\n                        } else if (completedWorkItems === work.length) {\n                            const elapsedSeconds = (Date.now() - startTime) / 1000;\n                            worker.removeEventListener('message', messageHandler);\n                            workersWorkingElem.value -= 1;\n                            elapsedTimeElem.innerText = `${numberFormat(elapsedSeconds)} seconds`;\n                            solveButtonElem.disabled = false;\n                            solveButtonElem.innerHTML = 'Solve';\n                            clearInterval(renderInterval);\n                            resolve();\n                        }\n                        workItemsElem.value = work.length - completedWorkItems;\n                        break;\n                    }\n                }\n            };\n\n            if (currentWorkItem < work.length) {\n                worker.addEventListener('message', messageHandler);\n                worker.postMessage({ type: 'solve', ...work[currentWorkItem++] });\n            }\n        }\n    });\n};\n\nsolveButtonElem.addEventListener('click', async e => {\n    e.preventDefault();\n    solveButtonElem.disabled = true;\n    solveButtonElem.innerText = 'Loading...';\n    const formData = Object.fromEntries([...new FormData(solveFormElem)]);\n    if (formData.wordlist === 'custom') {\n        var reader = new FileReader();\n        reader.onload = e => solve(event.target.result);\n        reader.readAsText(formData.customWordFile);\n    } else if (formData.wordlist === 'intersection') {\n        loadWords(wordlListElem.value).then(str1 => {\n            const list1 = str1.split(/\\r?\\n/);\n            loadWords(wordsAlphaListElem.value).then(str2 => {\n                const list2 = new Set(str2.split(/\\r?\\n/));\n                console.log(list1, list2);\n                solve(list1.filter(word => list2.has(word)).join('\\n'));\n            });\n        });\n    } else {\n        loadWords(formData.wordlist).then(solve);\n    }\n});\n"],
  "mappings": "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",
  "names": ["ios", "availableConcurrency", "workers", "_", "numberFormatter", "numberFormat", "number", "loadWords", "url", "res", "customWordFileElem", "customWordListElem", "elapsedTimeElem", "fiveLetterWordCountElem", "normalizedWordCountElem", "workersWorkingElem", "workItemsElem", "solutionCountElem", "solutionsElem", "wordCountElem", "solveFormElem", "solveButtonElem", "wordlListElem", "wordsAlphaListElem", "option", "e", "solve", "wordsString", "startTime", "allWords", "word", "fiveLetterWords", "normalizedWordMap", "normalizedWord", "entry", "options", "letter", "solutions", "displaySolutions", "a", "work", "charCode", "excludedLetter", "includedOptions", "b", "recordSolution", "solution", "normalizedSolution", "step", "renderInterval", "li", "elapsedSeconds", "currentWorkItem", "completedWorkItems", "concurrency", "resolve", "reject", "n", "worker", "messageHandler", "msg", "formData", "reader", "str1", "list1", "str2", "list2"]
}
