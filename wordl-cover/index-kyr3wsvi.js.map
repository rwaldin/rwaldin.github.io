{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["const ios = /iPad|iPhone/.test(navigator.userAgent);\nconst availableConcurrency = 'hardwareConcurrency' in navigator ? navigator.hardwareConcurrency : ios ? 2 : 8;\n\n// extra spaces in the worker url allow replacement of url with hashed url without affecting sourcemap locations\nconst workers = Array.from({ length: availableConcurrency }, _ => new Worker('./worker.js         ')); \nconst numberFormatter = new Intl.NumberFormat();\nconst numberFormat = number => numberFormatter.format(number);\nconst crlfRegex = /\\r?\\n/;\n\nconst { solutionsElem, solveFormElem, outputFormElem } = window;\n\nconst {\n    customWordFile: customWordFileElem,\n    solveButton: solveButtonElem,\n    concurrency: concurrencyElem,\n    wordList: wordListRadio,\n} = solveFormElem;\n\nconst {\n    wordCount: wordCountElem,\n    fiveLetterWordCount: fiveLetterWordCountElem,\n    normalizedWordCount: normalizedWordCountElem,\n    solutionCount: solutionCountElem,\n    elapsedTime: elapsedTimeElem,\n    workItems: workItemsElem,\n    workersWorking: workersWorkingElem,\n} = outputFormElem;\n\nconst customWordListElem = [...wordListRadio].find(({ value }) => value === 'custom');\nconst wordlListElem = [...wordListRadio].find(({ value }) => value.match(/wordl/));\nconst wordsAlphaListElem = [...wordListRadio].find(({ value }) => value.match(/words_alpha/));\n\nfor (let n = 0; n < availableConcurrency; ++n) {\n    const option = document.createElement('option');\n    option.append(n + 1);\n    concurrencyElem.append(option);\n}\nconcurrencyElem.value = availableConcurrency;\n\ncustomWordFileElem.addEventListener('change', _ => (wordListRadio.value = 'custom'));\ncustomWordListElem.addEventListener('change', _ => {\n    if (wordListRadio.value === 'custom' && !customWordFileElem.value) {\n        customWordFileElem.click();\n    }\n});\n\nconst splitWordsString = wordsString => {\n    if (Array.isArray(wordsString)) {\n        // intersect word lists\n        const [list1, list2] = wordsString.map(str => str.split(crlfRegex).map(word => word.trim().toLowerCase()));\n        const set = new Set(list1);\n        return list2.filter(word => set.has(word));\n    } else {\n        return wordsString.split(crlfRegex).map(word => word.trim().toLowerCase());\n    }\n};\n\nconst solve = wordsString => {\n    const startTime = Date.now();\n\n    solutionsElem.innerHTML = '';\n    solveButtonElem.innerText = 'Solving...';\n    solutionCountElem.innerText = 0;\n\n    const allWords = splitWordsString(wordsString);\n    wordCountElem.innerText = numberFormat(allWords.length);\n\n    const fiveLetterWords = allWords.filter(word => /^[a-z]{5}$/.test(word));\n    fiveLetterWordCountElem.innerText = numberFormat(fiveLetterWords.length);\n\n    // normalizedWords are fiveLetterWords with their letters rearranged so that they are sorted (WORDS becomes DORSW).\n    // Anagrams are removed from consideration by searching for normalizedWords instead of actual words since all anagrams\n    // map to the same normalizedWord.  Normalized words with any repeating characters are also removed.\n    const normalizedWordMap = new Map();\n    for (const word of fiveLetterWords) {\n        const normalizedWord = [...new Set(word)].sort().join('');\n        // ignore normalized words with repeating characters\n        if (normalizedWord.length === 5) {\n            const entry = normalizedWordMap.get(normalizedWord);\n            // combine anagrams for display later\n            normalizedWordMap.set(normalizedWord, entry ? `${entry}/${word}` : word);\n        }\n    }\n    normalizedWordCountElem.innerText = numberFormat(normalizedWordMap.size);\n\n    const words = [...normalizedWordMap.keys()];\n    const options = Object.fromEntries(words.map(word => [word, word.split('')]));\n\n    const a = 'a'.charCodeAt(0);\n    const allChars = Array.from({ length: 26 }, (_, i) => String.fromCharCode(a + i));\n    const usedChars = new Set(Object.values(options).flat());\n    if (usedChars.size !== 26) {\n        const missingChars = allChars.filter(char => !usedChars.includes(char));\n        solutionsElem.appendChild(document.createElement('li')).append(`Invalid word list. Missing letters: ${missingChars.join(', ')}`);\n        return;\n    }\n\n    const solutions = new Set();\n    const displaySolutions = [];\n\n    const workItems = allChars\n        .map(char => Object.fromEntries(Object.entries(options).filter(([word]) => !word.includes(char))))\n        // sort work in descending order of option count to reduce the time long-pole dangling workers require\n        .sort((workItem1, workItem2) => Object.keys(workItem2).length - Object.keys(workItem1).length);\n\n    const recordSolution = solution => {\n        // ignore solutions that contain the same normalized words as an already recorded solution, but in a different order\n        const normalizedSolution = solution.sort().join(',');\n        if (!solutions.has(normalizedSolution)) {\n            solutions.add(normalizedSolution);\n            displaySolutions.push(\n                normalizedSolution\n                    .split(',')\n                    .map(step => normalizedWordMap.get(step))\n                    .sort()\n                    .join(', ')\n            );\n        }\n    };\n\n    let currentWorkItem = 0;\n    let completedWorkItems = 0;\n\n    const renderInterval = setInterval(requestAnimationFrame, 60, _ => {\n        // append list elements for newly arrived solutions since last render\n        for (let i = solutionsElem.children.length; i < displaySolutions.length; ++i) {\n            solutionsElem.appendChild(document.createElement('li')).append(displaySolutions[i]);\n        }\n        solutionsElem.scrollTop = solutionsElem.scrollHeight;\n        solutionCountElem.innerText = numberFormat(solutions.size);\n        workItemsElem.value = workItems.length - completedWorkItems;\n        elapsedTimeElem.innerText = `${numberFormat((Date.now() - startTime) / 1000)} seconds`;\n    });\n\n    return new Promise(resolve => {\n        for (const [n, worker] of workers.entries()) {\n            if (n >= concurrencyElem.value) {\n                break;\n            }\n\n            const messageHandler = msg => {\n                switch (msg.data.type) {\n                    case 'solution': {\n                        recordSolution(msg.data.solution);\n                        break;\n                    }\n\n                    case 'completed': {\n                        ++completedWorkItems;\n                        if (currentWorkItem < workItems.length) {\n                            worker.postMessage({ type: 'solve', options: workItems[currentWorkItem++] });\n                        } else {\n                            workersWorkingElem.value -= 1;\n                            worker.removeEventListener('message', messageHandler);\n\n                            if (completedWorkItems === workItems.length) {\n                                solveButtonElem.disabled = false;\n                                solveButtonElem.innerText = 'Solve';\n                                elapsedTimeElem.innerText = `${numberFormat((Date.now() - startTime) / 1000)} seconds`;\n                                workItemsElem.value = 0;\n                                clearInterval(renderInterval);\n                                resolve();\n                            }\n                        }\n                        break;\n                    }\n                }\n            };\n\n            if (currentWorkItem < workItems.length) {\n                workersWorkingElem.value = n + 1;\n                worker.addEventListener('message', messageHandler);\n                worker.postMessage({ type: 'solve', options: workItems[currentWorkItem++] });\n            }\n        }\n    });\n};\n\nconst loadWords = url => fetch(url).then(response => response.text());\nconst fileReader = new FileReader();\nfileReader.addEventListener('load', async evt => await solve(evt.target.result));\n\nsolveButtonElem.addEventListener('click', async evt => {\n    evt.preventDefault();\n    solveButtonElem.disabled = true;\n    solveButtonElem.innerText = 'Loading...';\n\n    switch (wordListRadio.value) {\n        case 'custom': {\n            fileReader.readAsText(customWordFileElem.files[0]);\n            break;\n        }\n        case 'intersection': {\n            const [wordl, wordsAlpha] = await Promise.all([loadWords(wordlListElem.value), loadWords(wordsAlphaListElem.value)]);\n            await solve([wordl, wordsAlpha]);\n            break;\n        }\n        default: {\n            await solve(await loadWords(wordListRadio.value));\n            break;\n        }\n    }\n});\n\nif (location.hostname === 'waldin.net') {\n    const params = new URLSearchParams({\n        nc: Date.now(),\n        code: '840xigs5jBlPzxN77diWdugPDGjroC6y',\n        url: location.href,\n        t: document.title,\n        ref: document.referrer,\n        w: screen.width,\n        h: screen.height,\n    });\n    fetch(`https://api.pirsch.io/hit?${params}`);\n}\n"],
  "mappings": "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",
  "names": ["ios", "availableConcurrency", "workers", "_", "numberFormatter", "numberFormat", "number", "crlfRegex", "solutionsElem", "solveFormElem", "outputFormElem", "customWordFileElem", "solveButtonElem", "concurrencyElem", "wordListRadio", "wordCountElem", "fiveLetterWordCountElem", "normalizedWordCountElem", "solutionCountElem", "elapsedTimeElem", "workItemsElem", "workersWorkingElem", "customWordListElem", "value", "wordlListElem", "wordsAlphaListElem", "n", "option", "splitWordsString", "wordsString", "list1", "list2", "str", "word", "set", "solve", "startTime", "allWords", "fiveLetterWords", "normalizedWordMap", "normalizedWord", "entry", "words", "options", "a", "allChars", "i", "usedChars", "missingChars", "char", "solutions", "displaySolutions", "workItems", "workItem1", "workItem2", "recordSolution", "solution", "normalizedSolution", "step", "currentWorkItem", "completedWorkItems", "renderInterval", "resolve", "worker", "messageHandler", "msg", "loadWords", "url", "response", "fileReader", "evt", "wordl", "wordsAlpha", "params"]
}
