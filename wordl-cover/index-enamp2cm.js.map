{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["const ios = /iPad|iPhone/.test(navigator.userAgent);\nconst availableConcurrency = 'hardwareConcurrency' in navigator ? navigator.hardwareConcurrency : ios ? 2 : 8;\nconst workers = Array.from({ length: availableConcurrency }, _ => new Worker('./worker.js'));\nconst numberFormatter = new Intl.NumberFormat();\nconst numberFormat = number => numberFormatter.format(number);\nconst crlfRegex = /\\r?\\n/;\n\nconst { solutionsElem, solveFormElem, outputFormElem } = window;\n\nconst {\n    customWordFile: customWordFileElem,\n    solveButton: solveButtonElem,\n    concurrency: concurrencyElem,\n    wordList: wordListRadio,\n} = solveFormElem;\n\nconst {\n    wordCount: wordCountElem,\n    fiveLetterWordCount: fiveLetterWordCountElem,\n    normalizedWordCount: normalizedWordCountElem,\n    solutionCount: solutionCountElem,\n    elapsedTime: elapsedTimeElem,\n    workItems: workItemsElem,\n    workersWorking: workersWorkingElem,\n} = outputFormElem;\n\nconst customWordListElem = [...wordListRadio].find(({ value }) => value === 'custom');\nconst wordlListElem = [...wordListRadio].find(({ value }) => value.match(/wordl/));\nconst wordsAlphaListElem = [...wordListRadio].find(({ value }) => value.match(/words_alpha/));\n\nfor (let n = 0; n < availableConcurrency; ++n) {\n    const option = document.createElement('option');\n    option.append(n + 1);\n    concurrencyElem.append(option);\n}\n\nconcurrencyElem.value = availableConcurrency;\ncustomWordFileElem.addEventListener('change', _ => (wordListRadio.value = 'custom'));\ncustomWordListElem.addEventListener('change', _ => {\n    if (wordListRadio.value === 'custom' && !customWordFileElem.value) {\n        customWordFileElem.click();\n    }\n});\n\nconst solve = wordsString => {\n    const startTime = Date.now();\n\n    solutionsElem.innerHTML = '';\n    solveButtonElem.innerText = 'Solving...';\n    solutionCountElem.innerText = 0;\n\n    const allWords = wordsString.split(crlfRegex).map(word => word.trim().toLowerCase());\n    wordCountElem.innerText = numberFormat(allWords.length);\n\n    const fiveLetterWords = allWords.filter(word => /^[a-z]{5}$/.test(word));\n    fiveLetterWordCountElem.innerText = numberFormat(fiveLetterWords.length);\n\n    // normalizedWords are fiveLetterWords with their letters rearranged so that they are sorted (WORDS becomes DORSW).\n    // Anagrams are removed from consideration by searching for normalizedWords instead of actual words since all anagrams\n    // map to the same normalizedWord.  Normalized words with any repeating characters are also removed.\n    const normalizedWordMap = new Map();\n    for (const word of fiveLetterWords) {\n        const normalizedWord = [...new Set(word)].sort().join('');\n        // ignore normalized words with repeating characters\n        if (normalizedWord.length === 5) {\n            const entry = normalizedWordMap.get(normalizedWord);\n            // combine anagrams for display later\n            normalizedWordMap.set(normalizedWord, entry ? `${entry}/${word}` : word);\n        }\n    }\n    normalizedWordCountElem.innerText = numberFormat(normalizedWordMap.size);\n\n    const words = [...normalizedWordMap.keys()];\n    const options = Object.fromEntries(words.map(word => [word, word.split('')]));\n\n    const a = 'a'.charCodeAt(0);\n    const allChars = Array.from({ length: 26 }, (_, i) => String.fromCharCode(a + i));\n    const usedChars = new Set(Object.values(options).flat());\n    if (usedChars.size !== 26) {\n        const missingChars = allChars.filter(char => !usedChars.includes(char));\n        solutionsElem.appendChild(document.createElement('li')).append(`Invalid word list. Missing letters: ${missingChars.join(', ')}`);\n        return;\n    }\n\n    const solutions = new Set();\n    const displaySolutions = [];\n\n    const workItems = allChars\n        .map(char => Object.fromEntries(Object.entries(options).filter(([word]) => !word.includes(char))))\n        // sort work in descending order of option count to reduce the time long-pole dangling workers require\n        .sort((workItem1, workItem2) => Object.keys(workItem2).length - Object.keys(workItem1).length);\n\n    const recordSolution = solution => {\n        // ignore solutions that contain the same normalized words as an already recorded solution, but in a different order\n        const normalizedSolution = solution.sort().join(',');\n        if (!solutions.has(normalizedSolution)) {\n            solutions.add(normalizedSolution);\n            displaySolutions.push(\n                normalizedSolution\n                    .split(',')\n                    .map(step => normalizedWordMap.get(step))\n                    .sort()\n                    .join(', ')\n            );\n        }\n    };\n\n    const renderInterval = setInterval(requestAnimationFrame, 60, _ => {\n        // append list elements for newly arrived solutions since last render\n        for (let i = solutionsElem.children.length; i < displaySolutions.length; ++i) {\n            solutionsElem.appendChild(document.createElement('li')).append(displaySolutions[i]);\n        }\n        elapsedTimeElem.innerText = `${numberFormat((Date.now() - startTime) / 1000)} seconds`;\n        solutionCountElem.innerText = numberFormat(solutions.size);\n        solutionsElem.scrollTop = solutionsElem.scrollHeight;\n    });\n\n    let currentWorkItem = 0;\n    let completedWorkItems = 0;\n\n    return new Promise(resolve => {\n        for (const [n, worker] of workers.entries()) {\n            if (n >= concurrencyElem.value) {\n                break;\n            }\n            const messageHandler = msg => {\n                switch (msg.data.type) {\n                    case 'solution': {\n                        recordSolution(msg.data.solution);\n                        break;\n                    }\n\n                    case 'completed': {\n                        workItemsElem.value = workItems.length - ++completedWorkItems;\n\n                        if (currentWorkItem < workItems.length) {\n                            worker.postMessage({ type: 'solve', options: workItems[currentWorkItem++] });\n                        } else {\n                            workersWorkingElem.value -= 1;\n                            worker.removeEventListener('message', messageHandler);\n\n                            if (completedWorkItems === workItems.length) {\n                                solveButtonElem.disabled = false;\n                                solveButtonElem.innerText = 'Solve';\n                                clearInterval(renderInterval);\n                                resolve();\n                            }\n                        }\n                        break;\n                    }\n                }\n            };\n\n            if (currentWorkItem < workItems.length) {\n                workersWorkingElem.value = n + 1;\n                worker.addEventListener('message', messageHandler);\n                worker.postMessage({ type: 'solve', options: workItems[currentWorkItem++] });\n            }\n        }\n    });\n};\n\nconst loadWords = url => fetch(url).then(response => response.text());\n\nsolveButtonElem.addEventListener('click', async evt => {\n    evt.preventDefault();\n    solveButtonElem.disabled = true;\n    solveButtonElem.innerText = 'Loading...';\n\n    switch (wordListRadio.value) {\n        case 'custom': {\n            const reader = new FileReader();\n            reader.addEventListener('load', async evt => await solve(evt.target.result));\n            reader.readAsText(customWordFileElem.files[0]);\n            break;\n        }\n        case 'intersection': {\n            const list = await loadWords(wordlListElem.value).then(str => str.split(crlfRegex));\n            const set = await loadWords(wordsAlphaListElem.value).then(str => new Set(str.split(crlfRegex)));\n            await solve(list.filter(word => set.has(word)).join('\\n'));\n            break;\n        }\n        default: {\n            await solve(await loadWords(wordListRadio.value));\n        }\n    }\n});\n"],
  "mappings": "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",
  "names": ["ios", "availableConcurrency", "workers", "_", "numberFormatter", "numberFormat", "number", "crlfRegex", "solutionsElem", "solveFormElem", "outputFormElem", "customWordFileElem", "solveButtonElem", "concurrencyElem", "wordListRadio", "wordCountElem", "fiveLetterWordCountElem", "normalizedWordCountElem", "solutionCountElem", "elapsedTimeElem", "workItemsElem", "workersWorkingElem", "customWordListElem", "value", "wordlListElem", "wordsAlphaListElem", "option", "solve", "wordsString", "startTime", "allWords", "word", "fiveLetterWords", "normalizedWordMap", "normalizedWord", "entry", "words", "options", "a", "allChars", "i", "usedChars", "missingChars", "char", "solutions", "displaySolutions", "workItems", "workItem1", "workItem2", "recordSolution", "solution", "normalizedSolution", "step", "renderInterval", "currentWorkItem", "completedWorkItems", "resolve", "n", "worker", "messageHandler", "msg", "loadWords", "url", "response", "evt", "reader", "list", "str", "set"]
}
